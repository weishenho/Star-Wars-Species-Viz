{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["urlToHttps","url","match","replace","App","useState","speciesData","setSpeciesData","loading","setLoading","useEffect","a","newSpeciesData","fetch","result","json","data","concat","results","next","console","log","fetchSpecies","useFetchAllSpecies","loadingFetchAllSpecies","speciesOptions","setSpeciesOptions","selectedSpecies","setSelectedSpecies","Array","isArray","length","newSpeciesOptions","map","item","key","name","text","value","onOptionSelected","x","_","fetchPeople","people","Promise","all","peopleData","v","peopleResult","option","backgroundColor","type","y","x2","y2","colorStops","offset","color","global","title","left","top","textStyle","fontSize","xAxis","nameTextStyle","fontWeight","boundaryGap","axisLabel","margin","axisLine","show","axisTick","lineStyle","splitLine","max","Math","ceil","yAxis","position","dataset","source","grid","right","bottom","containLabel","tooltip","formatter","datapoint","marker","series","emphasis","itemStyle","borderColor","borderWidth","symbolSize","encode","className","style","zIndex","Dropdown","placeholder","search","selection","options","onChange","height","width","lazyUpdate","size-sensor","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e040bf26.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Dropdown } from \"semantic-ui-react\";\nimport * as _ from \"lodash\";\nimport ReactEcharts from \"echarts-for-react\";\n\ninterface People {\n  name: string;\n  height: string;\n  mass: string;\n  gender: string;\n}\n\ninterface SpeciesOptions {\n  key: string;\n  text: string;\n  value: string;\n}\n\ninterface Species {\n  name: string;\n  people: string[];\n}\n\nconst urlToHttps = (url: string) => {\n  if (url.match(\"^http://\")) {\n    url = url.replace(\"http://\", \"https://\");\n  }\n  return url;\n};\n\nconst useFetchAllSpecies = () => {\n  const [speciesData, setSpeciesData] = useState<Species[]>([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    async function fetchSpecies() {\n      try {\n        let newSpeciesData: Species[] = [];\n        let result = await fetch(\"https://swapi.dev/api/species/\");\n        let data = await result.json();\n\n        newSpeciesData = newSpeciesData.concat(data.results);\n\n        while (data.next) {\n          let url = urlToHttps(data.next);\n          result = await fetch(url);\n          data = await result.json();\n          newSpeciesData = newSpeciesData.concat(data.results);\n        }\n        console.log(\"fetchSpecies\");\n        setSpeciesData(newSpeciesData);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    }\n\n    fetchSpecies();\n    setLoading(false);\n  }, []);\n\n  return { speciesData, loading };\n};\n\nfunction App() {\n  const { speciesData, loading: loadingFetchAllSpecies } = useFetchAllSpecies();\n\n  const [speciesOptions, setSpeciesOptions] = useState<SpeciesOptions[]>([]);\n  const [selectedSpecies, setSelectedSpecies] = useState<People[]>([]);\n\n  useEffect(() => {\n    if (Array.isArray(speciesData) && speciesData.length > 0) {\n      const newSpeciesOptions = speciesData.map((item: { name: string }) => ({\n        key: item.name,\n        text: item.name,\n        value: item.name,\n      }));\n\n      setSpeciesOptions(newSpeciesOptions);\n    }\n  }, [speciesData]);\n\n  const onOptionSelected = async (value: string) => {\n    try {\n      const x: Species | undefined = _.find(speciesData, { name: value });\n      if (x) {\n        const fetchPeople = x.people.map((url: string) =>\n          fetch(urlToHttps(url))\n        );\n        const peopleData: Response[] = await Promise.all(fetchPeople);\n        const peopleResult: People[] = await Promise.all(\n          peopleData.map((v: Response) => v.json())\n        );\n        setSelectedSpecies(peopleResult);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // chart options\n  const option = {\n    backgroundColor: {\n      type: \"linear\",\n      x: 0,\n      y: 0,\n      x2: 1,\n      y2: 1,\n      colorStops: [\n        {\n          offset: 0,\n          color: \"#2c343c\",\n        },\n        {\n          offset: 1,\n          color: \"#051937\", // color at 100% position\n        },\n      ],\n      global: false, // false by default\n    },\n    title: {\n      text: \"Star Wars Species\",\n      left: \"center\",\n      top: 20,\n      textStyle: {\n        fontSize: 30,\n        color: \"#cfcfcf\",\n      },\n    },\n    xAxis: {\n      type: \"value\",\n      name: selectedSpecies.length > 0 ? \"Height\" : \"\",\n      nameTextStyle: {\n        color: \"#f2f2f2\",\n        fontWeight: \"bold\",\n      },\n      boundaryGap: false,\n      axisLabel: {\n        margin: 30,\n        color: \"#ffffff63\",\n      },\n      axisLine: {\n        show: false,\n      },\n      axisTick: {\n        show: true,\n        length: 25,\n        lineStyle: {\n          color: \"#ffffff1f\",\n        },\n      },\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: \"#ffffff1f\",\n        },\n      },\n      max: function (value: any) {\n        return Math.ceil(value.max * 1.03);\n      },\n    },\n    yAxis: {\n      type: \"value\",\n      name: selectedSpecies.length > 0 ? \"Mass\" : \"\",\n      nameTextStyle: {\n        color: \"#f2f2f2\",\n        fontWeight: \"bold\",\n      },\n      position: \"left\",\n      axisLabel: {\n        margin: 20,\n        color: \"#ffffff63\",\n      },\n      axisTick: {\n        show: true,\n        length: 15,\n        lineStyle: {\n          color: \"#ffffff1f\",\n        },\n      },\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: \"#ffffff1f\",\n        },\n      },\n      axisLine: {\n        show: false,\n      },\n      max: function (value: any) {\n        return Math.ceil(value.max * 1.03);\n      },\n    },\n    dataset: {\n      source: selectedSpecies,\n    },\n    grid: {\n      top: 160,\n      left: \"10%\",\n      right: \"10%\",\n      bottom: \"10%\",\n      containLabel: true,\n    },\n    tooltip: {\n      position: \"top\",\n      backgroundColor: \"#555\",\n      formatter: (datapoint: any) => {\n        // console.log(datapoint)\n        return (\n          datapoint.marker +\n          datapoint.data[\"name\"] +\n          \"<br/>\" +\n          datapoint.data[\"gender\"]\n        );\n      },\n    },\n\n    series: [\n      {\n        emphasis: {\n          itemStyle: {\n            borderColor: \"#fff\",\n            borderWidth: 2,\n          },\n        },\n        itemStyle: {\n          color: \"#f2e879\",\n        },\n        symbolSize: 15,\n        type: \"scatter\",\n        encode: {\n          x: \"height\",\n          y: \"mass\",\n        },\n      },\n    ],\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{ position: \"absolute\", left: \"50%\", top: 70, zIndex: 4 }}>\n        <div style={{ position: \"relative\", left: \"-50%\" }}>\n          <span style={{ fontWeight: \"bold\", color: \"#cfcfcf\" }}>\n            Pick a Species:{\" \"}\n          </span>\n          <Dropdown\n            placeholder=\"Species\"\n            search\n            selection\n            options={speciesOptions}\n            onChange={(_, data: any) => onOptionSelected(data.value)}\n            loading={loadingFetchAllSpecies}\n          />\n        </div>\n      </div>\n\n      <ReactEcharts\n        style={{ height: \"100%\", width: \"100%\" }}\n        option={option}\n        lazyUpdate={true}\n        size-sensor\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}